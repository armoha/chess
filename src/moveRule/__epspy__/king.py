## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _RELIMP(path, mod_name):
    import inspect, pathlib, importlib.util
    p = pathlib.Path(inspect.getabsfile(inspect.currentframe())).parent
    for s in path.split("."):
        if s == "":  p = p.parent
        else:  p = p / s
    try:
        spec = importlib.util.spec_from_file_location(mod_name, p / (mod_name + ".py"))
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
    except FileNotFoundError:
        loader = EPSLoader(mod_name, str(p / (mod_name + ".eps")))
        spec = importlib.util.spec_from_loader(mod_name, loader)
        module = loader.create_module(spec)
        loader.exec_module(module)
    return module

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _LVAR(vs):
    ret, ops = [], []
    for v in FlattenList(vs):
        if IsEUDVariable(v) and v.IsRValue():
            ret.append(v.makeL())
        else:
            nv = EUDVariable()
            ret.append(nv)
            ops.append((nv, SetTo, v))
    if ops:
        SeqCompute(ops)
    return List2Assignable(ret)

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import loc;
import loc
# (Line 2) import board;
import board
# (Line 4) function moveKing(unitPlayer, unitCellX, unitCellY) {
@EUDTracedFunc
def f_moveKing(unitPlayer, unitCellX, unitCellY):
    # (Line 5) const opponentPlayer = (unitPlayer == $P7) ? $P8 : $P7;
    EUDTraceLog(5)
    opponentPlayer = EUDTernary((unitPlayer == 6))(7)(6)
    # (Line 7) var x, y;
    x, y = EUDCreateVariables(2)
    # (Line 9) const initialXList = [
    # (Line 10) unitCellX - 1,
    # (Line 11) unitCellX - 1,
    # (Line 12) unitCellX - 1,
    # (Line 13) unitCellX,
    # (Line 15) unitCellX + 1,
    # (Line 16) unitCellX + 1,
    # (Line 17) unitCellX + 1,
    # (Line 18) unitCellX
    # (Line 19) ];
    EUDTraceLog(9)
    initialXList = _ARR(FlattenList([unitCellX - 1, unitCellX - 1, unitCellX - 1, unitCellX, unitCellX + 1, unitCellX + 1, unitCellX + 1, unitCellX]))
    # (Line 21) const initialYList = [
    # (Line 22) unitCellY - 1,
    # (Line 23) unitCellY ,
    # (Line 24) unitCellY + 1,
    # (Line 25) unitCellY + 1,
    # (Line 27) unitCellY + 1,
    # (Line 28) unitCellY ,
    # (Line 29) unitCellY - 1,
    # (Line 30) unitCellY - 1,
    # (Line 31) ];
    EUDTraceLog(21)
    initialYList = _ARR(FlattenList([unitCellY - 1, unitCellY, unitCellY + 1, unitCellY + 1, unitCellY + 1, unitCellY, unitCellY - 1, unitCellY - 1]))
    # (Line 34) for (var i = 0 ; i < 8 ; i++) {
    EUDTraceLog(34)
    i = _LVAR([0])
    _t1 = EUDWhile()
    EUDTraceLog(34)
    if _t1(i >= 8, neg=True):
        def _t2():
            EUDTraceLog(34)
            i.__iadd__(1)
        # (Line 35) x = initialXList[i];
        EUDTraceLog(35)
        x << (initialXList[i])
        # (Line 36) y = initialYList[i];
        EUDTraceLog(36)
        y << (initialYList[i])
        # (Line 38) if (1 <= x && x <= 8 && 1 <= y && y <= 8) {
        _t3 = EUDIf()
        EUDTraceLog(38)
        if _t3(EUDSCAnd()(1 <= x)(x <= 8)(1 <= y)(y <= 8)()):
            # (Line 39) const otherCellPlayer = board.getBoard(x, y)[[0]];
            EUDTraceLog(39)
            otherCellPlayer = board.f_getBoard(x, y)[0]
            # (Line 40) if (otherCellPlayer == 0) {
            _t4 = EUDIf()
            EUDTraceLog(40)
            if _t4(otherCellPlayer == 0):
                # (Line 41) loc.moveCLoc(x, y); CreateUnit(1, 'Cursor', 'cLoc', unitPlayer);
                EUDTraceLog(41)
                loc.f_moveCLoc(x, y)
                # (Line 42) } else if (otherCellPlayer == unitPlayer);
                EUDTraceLog(41)
                DoActions(CreateUnit(1, 'Cursor', 'cLoc', unitPlayer))
            _t5 = EUDElseIf()
            EUDTraceLog(42)
            if _t5(otherCellPlayer == unitPlayer):
                # (Line 43) else if (otherCellPlayer == opponentPlayer) {
                pass
            _t6 = EUDElseIf()
            EUDTraceLog(43)
            if _t6(otherCellPlayer == opponentPlayer):
                # (Line 44) loc.moveCLoc(x, y); CreateUnit(1, 'Cursor', 'cLoc', unitPlayer);
                EUDTraceLog(44)
                loc.f_moveCLoc(x, y)
                # (Line 45) }
                EUDTraceLog(44)
                DoActions(CreateUnit(1, 'Cursor', 'cLoc', unitPlayer))
                # (Line 46) }
            EUDEndIf()
            # (Line 47) }
        EUDEndIf()
        # (Line 50) const kingLastMovedTurn = board.getBoard(unitCellX, unitCellY)[[2]];
        EUDSetContinuePoint()
        _t2()
    EUDEndWhile()
    EUDTraceLog(50)
    kingLastMovedTurn = board.f_getBoard(unitCellX, unitCellY)[2]
    # (Line 51) if (kingLastMovedTurn == 0) {
    _t7 = EUDIf()
    EUDTraceLog(51)
    if _t7(kingLastMovedTurn == 0):
        # (Line 56) if (
        _t8 = EUDIf()
        # (Line 57) (board.getBoard(3, unitCellY)[[0]] == 0) &&
        # (Line 58) (board.getBoard(2, unitCellY)[[0]] == 0)
        # (Line 59) ) {
        EUDTraceLog(59)
        if _t8(EUDSCAnd()((board.f_getBoard(3, unitCellY)[0] == 0))((board.f_getBoard(2, unitCellY)[0] == 0))()):
            # (Line 60) const p, ut, lmt = board.getBoard(1, unitCellY);
            EUDTraceLog(60)
            p, ut, lmt = List2Assignable([board.f_getBoard(1, unitCellY)])
            # (Line 61) if (p == unitPlayer && ut == $U('Rook') && lmt == 0) {
            _t9 = EUDIf()
            EUDTraceLog(61)
            if _t9(EUDSCAnd()(p == unitPlayer)(ut == EncodeUnit('Rook'))(lmt == 0)()):
                # (Line 62) loc.moveCLoc(unitCellX - 2, unitCellY); CreateUnit(1, 'Castling', 'cLoc', unitPlayer);
                EUDTraceLog(62)
                loc.f_moveCLoc(unitCellX - 2, unitCellY)
                # (Line 63) }
                EUDTraceLog(62)
                DoActions(CreateUnit(1, 'Castling', 'cLoc', unitPlayer))
                # (Line 64) }
            EUDEndIf()
            # (Line 67) if (
        EUDEndIf()
        _t10 = EUDIf()
        # (Line 68) (board.getBoard(5, unitCellY)[[0]] == 0) &&
        # (Line 69) (board.getBoard(6, unitCellY)[[0]] == 0) &&
        # (Line 70) (board.getBoard(7, unitCellY)[[0]] == 0)
        # (Line 71) ) {
        EUDTraceLog(71)
        if _t10(EUDSCAnd()((board.f_getBoard(5, unitCellY)[0] == 0))((board.f_getBoard(6, unitCellY)[0] == 0))((board.f_getBoard(7, unitCellY)[0] == 0))()):
            # (Line 72) const p, ut, lmt = board.getBoard(8, unitCellY);
            EUDTraceLog(72)
            p, ut, lmt = List2Assignable([board.f_getBoard(8, unitCellY)])
            # (Line 73) if (p == unitPlayer && ut == $U('Rook') && lmt == 0) {
            _t11 = EUDIf()
            EUDTraceLog(73)
            if _t11(EUDSCAnd()(p == unitPlayer)(ut == EncodeUnit('Rook'))(lmt == 0)()):
                # (Line 74) loc.moveCLoc(unitCellX + 2, unitCellY); CreateUnit(1, 'Castling', 'cLoc', unitPlayer);
                EUDTraceLog(74)
                loc.f_moveCLoc(unitCellX + 2, unitCellY)
                # (Line 75) }
                EUDTraceLog(74)
                DoActions(CreateUnit(1, 'Castling', 'cLoc', unitPlayer))
                # (Line 76) }
            EUDEndIf()
            # (Line 77) }
        EUDEndIf()
        # (Line 78) }
    EUDEndIf()
