## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _RELIMP(path, mod_name):
    import inspect, pathlib, importlib.util
    p = pathlib.Path(inspect.getabsfile(inspect.currentframe())).parent
    for s in path.split("."):
        if s == "":  p = p.parent
        else:  p = p / s
    try:
        spec = importlib.util.spec_from_file_location(mod_name, p / (mod_name + ".py"))
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
    except FileNotFoundError:
        loader = EPSLoader(mod_name, str(p / (mod_name + ".eps")))
        spec = importlib.util.spec_from_loader(mod_name, loader)
        module = loader.create_module(spec)
        loader.exec_module(module)
    return module

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _LVAR(vs):
    ret, ops = [], []
    for v in FlattenList(vs):
        if IsEUDVariable(v) and v.IsRValue():
            ret.append(v.makeL())
        else:
            nv = EUDVariable()
            ret.append(nv)
            ops.append((nv, SetTo, v))
    if ops:
        SeqCompute(ops)
    return List2Assignable(ret)

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import loc;
import loc
# (Line 2) import board;
import board
# (Line 4) function movePawn(unitPlayer, unitCellX, unitCellY, currentTurn) {
@EUDTracedFunc
def f_movePawn(unitPlayer, unitCellX, unitCellY, currentTurn):
    # (Line 5) const opponentPlayer = (unitPlayer == $P7) ? $P8 : $P7;
    EUDTraceLog(5)
    opponentPlayer = EUDTernary((unitPlayer == 6))(7)(6)
    # (Line 6) const pawnDy = (unitPlayer == $P7) ? 1 : -1;
    EUDTraceLog(6)
    pawnDy = EUDTernary((unitPlayer == 6))(1)(-1)
    # (Line 7) const pawnStartingY = (unitPlayer == $P7) ? 2 : 7;
    EUDTraceLog(7)
    pawnStartingY = EUDTernary((unitPlayer == 6))(2)(7)
    # (Line 8) const enPassentY = (unitPlayer == $P7) ? 5 : 4;
    EUDTraceLog(8)
    enPassentY = EUDTernary((unitPlayer == 6))(5)(4)
    # (Line 10) if (unitCellY == pawnStartingY) {
    _t1 = EUDIf()
    EUDTraceLog(10)
    if _t1(unitCellY == pawnStartingY):
        # (Line 11) if(board.getBoard(unitCellX, unitCellY + pawnDy * 2)[[0]] == 0) {
        _t2 = EUDIf()
        EUDTraceLog(11)
        if _t2(board.f_getBoard(unitCellX, unitCellY + pawnDy * 2)[0] == 0):
            # (Line 12) loc.moveCLoc(unitCellX, unitCellY + pawnDy * 2); CreateUnit(1, 'Cursor', 'cLoc', unitPlayer);
            EUDTraceLog(12)
            loc.f_moveCLoc(unitCellX, unitCellY + pawnDy * 2)
            # (Line 13) }
            EUDTraceLog(12)
            DoActions(CreateUnit(1, 'Cursor', 'cLoc', unitPlayer))
            # (Line 14) }
        EUDEndIf()
        # (Line 16) if (1 <= unitCellY + pawnDy && unitCellY + pawnDy <= 8) {
    EUDEndIf()
    _t3 = EUDIf()
    EUDTraceLog(16)
    if _t3(EUDSCAnd()(1 <= unitCellY + pawnDy)(unitCellY + pawnDy <= 8)()):
        # (Line 17) if(board.getBoard(unitCellX, unitCellY + pawnDy)[[0]] == 0) {
        _t4 = EUDIf()
        EUDTraceLog(17)
        if _t4(board.f_getBoard(unitCellX, unitCellY + pawnDy)[0] == 0):
            # (Line 18) loc.moveCLoc(unitCellX, unitCellY + pawnDy); CreateUnit(1, 'Cursor', 'cLoc', unitPlayer);
            EUDTraceLog(18)
            loc.f_moveCLoc(unitCellX, unitCellY + pawnDy)
            # (Line 19) }
            EUDTraceLog(18)
            DoActions(CreateUnit(1, 'Cursor', 'cLoc', unitPlayer))
            # (Line 20) if(unitCellX > 1 && board.getBoard(unitCellX - 1, unitCellY + pawnDy)[[0]] == opponentPlayer) {
        EUDEndIf()
        _t5 = EUDIf()
        EUDTraceLog(20)
        if _t5(EUDSCAnd()(unitCellX <= 1, neg=True)(board.f_getBoard(unitCellX - 1, unitCellY + pawnDy)[0] == opponentPlayer)()):
            # (Line 21) loc.moveCLoc(unitCellX - 1, unitCellY + pawnDy); CreateUnit(1, 'Cursor', 'cLoc', unitPlayer);
            EUDTraceLog(21)
            loc.f_moveCLoc(unitCellX - 1, unitCellY + pawnDy)
            # (Line 22) }
            EUDTraceLog(21)
            DoActions(CreateUnit(1, 'Cursor', 'cLoc', unitPlayer))
            # (Line 23) if(unitCellX < 8 && board.getBoard(unitCellX + 1, unitCellY + pawnDy)[[0]] == opponentPlayer) {
        EUDEndIf()
        _t6 = EUDIf()
        EUDTraceLog(23)
        if _t6(EUDSCAnd()(unitCellX >= 8, neg=True)(board.f_getBoard(unitCellX + 1, unitCellY + pawnDy)[0] == opponentPlayer)()):
            # (Line 24) loc.moveCLoc(unitCellX + 1, unitCellY + pawnDy); CreateUnit(1, 'Cursor', 'cLoc', unitPlayer);
            EUDTraceLog(24)
            loc.f_moveCLoc(unitCellX + 1, unitCellY + pawnDy)
            # (Line 25) }
            EUDTraceLog(24)
            DoActions(CreateUnit(1, 'Cursor', 'cLoc', unitPlayer))
            # (Line 26) }
        EUDEndIf()
        # (Line 29) if (unitCellY == enPassentY) {
    EUDEndIf()
    _t7 = EUDIf()
    EUDTraceLog(29)
    if _t7(unitCellY == enPassentY):
        # (Line 30) if (unitCellX > 1) {
        _t8 = EUDIf()
        EUDTraceLog(30)
        if _t8(unitCellX <= 1, neg=True):
            # (Line 31) const p, ut, lmt = board.getBoard(unitCellX - 1, unitCellY);
            EUDTraceLog(31)
            p, ut, lmt = List2Assignable([board.f_getBoard(unitCellX - 1, unitCellY)])
            # (Line 32) if (p == opponentPlayer && ut == $U('Pawn') && lmt == currentTurn - 1) {
            _t9 = EUDIf()
            EUDTraceLog(32)
            if _t9(EUDSCAnd()(p == opponentPlayer)(ut == EncodeUnit('Pawn'))(lmt == currentTurn - 1)()):
                # (Line 33) loc.moveCLoc(unitCellX - 1, unitCellY + pawnDy); CreateUnit(1, 'Cursor', 'cLoc', unitPlayer);
                EUDTraceLog(33)
                loc.f_moveCLoc(unitCellX - 1, unitCellY + pawnDy)
                # (Line 34) }
                EUDTraceLog(33)
                DoActions(CreateUnit(1, 'Cursor', 'cLoc', unitPlayer))
                # (Line 35) }
            EUDEndIf()
            # (Line 37) if (unitCellX < 8) {
        EUDEndIf()
        _t10 = EUDIf()
        EUDTraceLog(37)
        if _t10(unitCellX >= 8, neg=True):
            # (Line 38) const p, ut, lmt = board.getBoard(unitCellX + 1, unitCellY);
            EUDTraceLog(38)
            p, ut, lmt = List2Assignable([board.f_getBoard(unitCellX + 1, unitCellY)])
            # (Line 39) if (p == opponentPlayer && ut == $U('Pawn') && lmt == currentTurn - 1) {
            _t11 = EUDIf()
            EUDTraceLog(39)
            if _t11(EUDSCAnd()(p == opponentPlayer)(ut == EncodeUnit('Pawn'))(lmt == currentTurn - 1)()):
                # (Line 40) loc.moveCLoc(unitCellX + 1, unitCellY + pawnDy); CreateUnit(1, 'Cursor', 'cLoc', unitPlayer);
                EUDTraceLog(40)
                loc.f_moveCLoc(unitCellX + 1, unitCellY + pawnDy)
                # (Line 41) }
                EUDTraceLog(40)
                DoActions(CreateUnit(1, 'Cursor', 'cLoc', unitPlayer))
                # (Line 42) }
            EUDEndIf()
            # (Line 43) }
        EUDEndIf()
        # (Line 44) }
    EUDEndIf()
