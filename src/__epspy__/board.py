## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _RELIMP(path, mod_name):
    import inspect, pathlib, importlib.util
    p = pathlib.Path(inspect.getabsfile(inspect.currentframe())).parent
    for s in path.split("."):
        if s == "":  p = p.parent
        else:  p = p / s
    try:
        spec = importlib.util.spec_from_file_location(mod_name, p / (mod_name + ".py"))
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
    except FileNotFoundError:
        loader = EPSLoader(mod_name, str(p / (mod_name + ".eps")))
        spec = importlib.util.spec_from_loader(mod_name, loader)
        module = loader.create_module(spec)
        loader.exec_module(module)
    return module

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _LVAR(vs):
    ret, ops = [], []
    for v in FlattenList(vs):
        if IsEUDVariable(v) and v.IsRValue():
            ret.append(v.makeL())
        else:
            nv = EUDVariable()
            ret.append(nv)
            ops.append((nv, SetTo, v))
    if ops:
        SeqCompute(ops)
    return List2Assignable(ret)

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import loc;
import loc
# (Line 3) const boardArray = EUDArray(64);
boardArray = _CGFW(lambda: [EUDArray(64)], 1)[0]
# (Line 5) function placeBoard(x, y, unit: TrgUnit, player: TrgPlayer, turn) {
@EUDTracedTypedFunc([None, None, TrgUnit, TrgPlayer, None])
def f_placeBoard(x, y, unit, player, turn):
    # (Line 6) boardArray[(y - 1) * 8 + (x - 1)] = unit + 1000 * player + 10000 * turn;
    EUDTraceLog(6)
    _ARRW(boardArray, (y - 1) * 8 + (x - 1)) << (unit + 1000 * player + 10000 * turn)
    # (Line 7) loc.moveCLoc(x, y);
    EUDTraceLog(7)
    loc.f_moveCLoc(x, y)
    # (Line 8) CreateUnit(1, unit, 'cLoc', player);
    # (Line 9) }
    EUDTraceLog(8)
    DoActions(CreateUnit(1, unit, 'cLoc', player))
    # (Line 11) function removeBoard(x, y) {

@EUDTracedFunc
def f_removeBoard(x, y):
    # (Line 12) boardArray[(y - 1) * 8 + (x - 1)] = 0;
    EUDTraceLog(12)
    _ARRW(boardArray, (y - 1) * 8 + (x - 1)) << (0)
    # (Line 13) loc.moveCLoc(x, y);
    EUDTraceLog(13)
    loc.f_moveCLoc(x, y)
    # (Line 14) RemoveUnitAt(All, '(any unit)', 'cLoc', AllPlayers);
    # (Line 15) }
    EUDTraceLog(14)
    DoActions(RemoveUnitAt(All, '(any unit)', 'cLoc', AllPlayers))
    # (Line 17) function getBoard(x, y) {

@EUDTracedFunc
def f_getBoard(x, y):
    # (Line 18) const value = boardArray[(y - 1) * 8 + (x - 1)];
    EUDTraceLog(18)
    value = boardArray[(y - 1) * 8 + (x - 1)]
    # (Line 19) const turn = value / 10000;
    EUDTraceLog(19)
    turn = value // 10000
    # (Line 20) const player = value / 1000 % 10;
    EUDTraceLog(20)
    player = value // 1000 % 10
    # (Line 21) const unit = value % 1000;
    EUDTraceLog(21)
    unit = value % 1000
    # (Line 22) return player, unit, turn;
    EUDTraceLog(22)
    EUDReturn(player, unit, turn)
    # (Line 23) }
    # (Line 25) function initBoard () {

@EUDTracedFunc
def f_initBoard():
    # (Line 26) placeBoard(1, 2, 'Pawn', P7, 0);
    EUDTraceLog(26)
    f_placeBoard(1, 2, 'Pawn', P7, 0)
    # (Line 27) placeBoard(2, 2, 'Pawn', P7, 0);
    EUDTraceLog(27)
    f_placeBoard(2, 2, 'Pawn', P7, 0)
    # (Line 28) placeBoard(3, 2, 'Pawn', P7, 0);
    EUDTraceLog(28)
    f_placeBoard(3, 2, 'Pawn', P7, 0)
    # (Line 29) placeBoard(4, 2, 'Pawn', P7, 0);
    EUDTraceLog(29)
    f_placeBoard(4, 2, 'Pawn', P7, 0)
    # (Line 30) placeBoard(5, 2, 'Pawn', P7, 0);
    EUDTraceLog(30)
    f_placeBoard(5, 2, 'Pawn', P7, 0)
    # (Line 31) placeBoard(6, 2, 'Pawn', P7, 0);
    EUDTraceLog(31)
    f_placeBoard(6, 2, 'Pawn', P7, 0)
    # (Line 32) placeBoard(7, 2, 'Pawn', P7, 0);
    EUDTraceLog(32)
    f_placeBoard(7, 2, 'Pawn', P7, 0)
    # (Line 33) placeBoard(8, 2, 'Pawn', P7, 0);
    EUDTraceLog(33)
    f_placeBoard(8, 2, 'Pawn', P7, 0)
    # (Line 35) placeBoard(1, 1, 'Rook', P7, 0);
    EUDTraceLog(35)
    f_placeBoard(1, 1, 'Rook', P7, 0)
    # (Line 36) placeBoard(2, 1, 'Knight', P7, 0);
    EUDTraceLog(36)
    f_placeBoard(2, 1, 'Knight', P7, 0)
    # (Line 37) placeBoard(3, 1, 'Bishop', P7, 0);
    EUDTraceLog(37)
    f_placeBoard(3, 1, 'Bishop', P7, 0)
    # (Line 38) placeBoard(4, 1, 'King', P7, 0);
    EUDTraceLog(38)
    f_placeBoard(4, 1, 'King', P7, 0)
    # (Line 39) placeBoard(5, 1, 'Queen', P7, 0);
    EUDTraceLog(39)
    f_placeBoard(5, 1, 'Queen', P7, 0)
    # (Line 40) placeBoard(6, 1, 'Bishop', P7, 0);
    EUDTraceLog(40)
    f_placeBoard(6, 1, 'Bishop', P7, 0)
    # (Line 41) placeBoard(7, 1, 'Knight', P7, 0);
    EUDTraceLog(41)
    f_placeBoard(7, 1, 'Knight', P7, 0)
    # (Line 42) placeBoard(8, 1, 'Rook', P7, 0);
    EUDTraceLog(42)
    f_placeBoard(8, 1, 'Rook', P7, 0)
    # (Line 44) placeBoard(1, 7, 'Pawn', P8, 0);
    EUDTraceLog(44)
    f_placeBoard(1, 7, 'Pawn', P8, 0)
    # (Line 45) placeBoard(2, 7, 'Pawn', P8, 0);
    EUDTraceLog(45)
    f_placeBoard(2, 7, 'Pawn', P8, 0)
    # (Line 46) placeBoard(3, 7, 'Pawn', P8, 0);
    EUDTraceLog(46)
    f_placeBoard(3, 7, 'Pawn', P8, 0)
    # (Line 47) placeBoard(4, 7, 'Pawn', P8, 0);
    EUDTraceLog(47)
    f_placeBoard(4, 7, 'Pawn', P8, 0)
    # (Line 48) placeBoard(5, 7, 'Pawn', P8, 0);
    EUDTraceLog(48)
    f_placeBoard(5, 7, 'Pawn', P8, 0)
    # (Line 49) placeBoard(6, 7, 'Pawn', P8, 0);
    EUDTraceLog(49)
    f_placeBoard(6, 7, 'Pawn', P8, 0)
    # (Line 50) placeBoard(7, 7, 'Pawn', P8, 0);
    EUDTraceLog(50)
    f_placeBoard(7, 7, 'Pawn', P8, 0)
    # (Line 51) placeBoard(8, 7, 'Pawn', P8, 0);
    EUDTraceLog(51)
    f_placeBoard(8, 7, 'Pawn', P8, 0)
    # (Line 53) placeBoard(1, 8, 'Rook', P8, 0);
    EUDTraceLog(53)
    f_placeBoard(1, 8, 'Rook', P8, 0)
    # (Line 54) placeBoard(2, 8, 'Knight', P8, 0);
    EUDTraceLog(54)
    f_placeBoard(2, 8, 'Knight', P8, 0)
    # (Line 55) placeBoard(3, 8, 'Bishop', P8, 0);
    EUDTraceLog(55)
    f_placeBoard(3, 8, 'Bishop', P8, 0)
    # (Line 56) placeBoard(4, 8, 'King', P8, 0);
    EUDTraceLog(56)
    f_placeBoard(4, 8, 'King', P8, 0)
    # (Line 57) placeBoard(5, 8, 'Queen', P8, 0);
    EUDTraceLog(57)
    f_placeBoard(5, 8, 'Queen', P8, 0)
    # (Line 58) placeBoard(6, 8, 'Bishop', P8, 0);
    EUDTraceLog(58)
    f_placeBoard(6, 8, 'Bishop', P8, 0)
    # (Line 59) placeBoard(7, 8, 'Knight', P8, 0);
    EUDTraceLog(59)
    f_placeBoard(7, 8, 'Knight', P8, 0)
    # (Line 60) placeBoard(8, 8, 'Rook', P8, 0);
    EUDTraceLog(60)
    f_placeBoard(8, 8, 'Rook', P8, 0)
    # (Line 61) }
