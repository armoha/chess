## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _RELIMP(path, mod_name):
    import inspect, pathlib, importlib.util
    p = pathlib.Path(inspect.getabsfile(inspect.currentframe())).parent
    for s in path.split("."):
        if s == "":  p = p.parent
        else:  p = p / s
    try:
        spec = importlib.util.spec_from_file_location(mod_name, p / (mod_name + ".py"))
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
    except FileNotFoundError:
        loader = EPSLoader(mod_name, str(p / (mod_name + ".eps")))
        spec = importlib.util.spec_from_loader(mod_name, loader)
        module = loader.create_module(spec)
        loader.exec_module(module)
    return module

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _LVAR(vs):
    ret, ops = [], []
    for v in FlattenList(vs):
        if IsEUDVariable(v) and v.IsRValue():
            ret.append(v.makeL())
        else:
            nv = EUDVariable()
            ret.append(nv)
            ops.append((nv, SetTo, v))
    if ops:
        SeqCompute(ops)
    return List2Assignable(ret)

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) const pxMove = $L("pxMove");
pxMove = _CGFW(lambda: [GetLocationIndex("pxMove")], 1)[0]
# (Line 3) function setLocationPos(locId, x, y, w, h) {
@EUDTracedFunc
def f_setLocationPos(locId, x, y, w, h):
    # (Line 4) SetMemoryEPD(EPD(0x58DC4C) + 5 * locId + 0, SetTo, x);
    # (Line 5) SetMemoryEPD(EPD(0x58DC4C) + 5 * locId + 1, SetTo, y);
    EUDTraceLog(4)
    DoActions(SetMemoryEPD(EPD(0x58DC4C) + 5 * locId + 0, SetTo, x))
    # (Line 6) SetMemoryEPD(EPD(0x58DC4C) + 5 * locId + 2, SetTo, x + w);
    EUDTraceLog(5)
    DoActions(SetMemoryEPD(EPD(0x58DC4C) + 5 * locId + 1, SetTo, y))
    # (Line 7) SetMemoryEPD(EPD(0x58DC4C) + 5 * locId + 3, SetTo, y + h);
    EUDTraceLog(6)
    DoActions(SetMemoryEPD(EPD(0x58DC4C) + 5 * locId + 2, SetTo, x + w))
    # (Line 8) }
    EUDTraceLog(7)
    DoActions(SetMemoryEPD(EPD(0x58DC4C) + 5 * locId + 3, SetTo, y + h))
    # (Line 10) function getLocationPos(locId) {

@EUDTracedFunc
def f_getLocationPos(locId):
    # (Line 11) const x0 = dwread_epd(EPD(0x58DC4C) + 5 * locId + 0);
    EUDTraceLog(11)
    x0 = f_dwread_epd(EPD(0x58DC4C) + 5 * locId + 0)
    # (Line 12) const y0 = dwread_epd(EPD(0x58DC4C) + 5 * locId + 1);
    EUDTraceLog(12)
    y0 = f_dwread_epd(EPD(0x58DC4C) + 5 * locId + 1)
    # (Line 13) const x1 = dwread_epd(EPD(0x58DC4C) + 5 * locId + 2);
    EUDTraceLog(13)
    x1 = f_dwread_epd(EPD(0x58DC4C) + 5 * locId + 2)
    # (Line 14) const y1 = dwread_epd(EPD(0x58DC4C) + 5 * locId + 3);
    EUDTraceLog(14)
    y1 = f_dwread_epd(EPD(0x58DC4C) + 5 * locId + 3)
    # (Line 15) return x0, y0, x1 - x0, y1 - y0;
    EUDTraceLog(15)
    EUDReturn(x0, y0, x1 - x0, y1 - y0)
    # (Line 16) }
    # (Line 18) var c11x, c11y = -1, -1;

c11x, c11y = EUDCreateVariables(2)
_IGVA([c11x, c11y], lambda: [-1, -1])
# (Line 19) function moveCLoc(x, y) {
@EUDTracedFunc
def f_moveCLoc(x, y):
    # (Line 20) if (c11x == -1) {
    _t1 = EUDIf()
    EUDTraceLog(20)
    if _t1(c11x == -1):
        # (Line 21) c11x, c11y = getLocationPos($L('c11'))[[0, 1]];
        EUDTraceLog(21)
        _SV([c11x, c11y], [_SRET(f_getLocationPos(GetLocationIndex('c11')), [0, 1])])
        # (Line 22) }
        # (Line 23) setLocationPos($L('cLoc'), c11x + (x - 1) * 64, c11y + (y - 1) * 64, 64, 64);
    EUDEndIf()
    EUDTraceLog(23)
    f_setLocationPos(GetLocationIndex('cLoc'), c11x + (x - 1) * 64, c11y + (y - 1) * 64, 64, 64)
    # (Line 24) }
    # (Line 26) function pxMoveTo(x, y) {

@EUDTracedFunc
def f_pxMoveTo(x, y):
    # (Line 27) setLocationPos(pxMove, x, y, 0, 0);
    EUDTraceLog(27)
    f_setLocationPos(pxMove, x, y, 0, 0)
    # (Line 28) }
