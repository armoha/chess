## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _RELIMP(path, mod_name):
    import inspect, pathlib, importlib.util
    p = pathlib.Path(inspect.getabsfile(inspect.currentframe())).parent
    for s in path.split("."):
        if s == "":  p = p.parent
        else:  p = p / s
    try:
        spec = importlib.util.spec_from_file_location(mod_name, p / (mod_name + ".py"))
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
    except FileNotFoundError:
        loader = EPSLoader(mod_name, str(p / (mod_name + ".eps")))
        spec = importlib.util.spec_from_loader(mod_name, loader)
        module = loader.create_module(spec)
        loader.exec_module(module)
    return module

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _LVAR(vs):
    ret, ops = [], []
    for v in FlattenList(vs):
        if IsEUDVariable(v) and v.IsRValue():
            ret.append(v.makeL())
        else:
            nv = EUDVariable()
            ret.append(nv)
            ops.append((nv, SetTo, v))
    if ops:
        SeqCompute(ops)
    return List2Assignable(ret)

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import loc;
import loc
# (Line 3) const boardArray = EUDArray(64);
boardArray = _CGFW(lambda: [EUDArray(64)], 1)[0]
# (Line 5) function placeBoard(x, y, unit: TrgUnit, player: TrgPlayer) {
@EUDTracedTypedFunc([None, None, TrgUnit, TrgPlayer])
def f_placeBoard(x, y, unit, player):
    # (Line 6) boardArray[(y - 1) * 8 + (x - 1)] = unit + 1000 * player;
    EUDTraceLog(6)
    _ARRW(boardArray, (y - 1) * 8 + (x - 1)) << (unit + 1000 * player)
    # (Line 7) loc.moveCLoc(x, y);
    EUDTraceLog(7)
    loc.f_moveCLoc(x, y)
    # (Line 8) CreateUnit(1, unit, 'cLoc', player);
    # (Line 9) }
    EUDTraceLog(8)
    DoActions(CreateUnit(1, unit, 'cLoc', player))
    # (Line 11) function initBoard () {

@EUDTracedFunc
def f_initBoard():
    # (Line 12) placeBoard(1, 2, 'Pawn', P7);
    EUDTraceLog(12)
    f_placeBoard(1, 2, 'Pawn', P7)
    # (Line 13) placeBoard(2, 2, 'Pawn', P7);
    EUDTraceLog(13)
    f_placeBoard(2, 2, 'Pawn', P7)
    # (Line 14) placeBoard(3, 2, 'Pawn', P7);
    EUDTraceLog(14)
    f_placeBoard(3, 2, 'Pawn', P7)
    # (Line 15) placeBoard(4, 2, 'Pawn', P7);
    EUDTraceLog(15)
    f_placeBoard(4, 2, 'Pawn', P7)
    # (Line 16) placeBoard(5, 2, 'Pawn', P7);
    EUDTraceLog(16)
    f_placeBoard(5, 2, 'Pawn', P7)
    # (Line 17) placeBoard(6, 2, 'Pawn', P7);
    EUDTraceLog(17)
    f_placeBoard(6, 2, 'Pawn', P7)
    # (Line 18) placeBoard(7, 2, 'Pawn', P7);
    EUDTraceLog(18)
    f_placeBoard(7, 2, 'Pawn', P7)
    # (Line 19) placeBoard(8, 2, 'Pawn', P7);
    EUDTraceLog(19)
    f_placeBoard(8, 2, 'Pawn', P7)
    # (Line 21) placeBoard(1, 1, 'Rook', P7);
    EUDTraceLog(21)
    f_placeBoard(1, 1, 'Rook', P7)
    # (Line 22) placeBoard(2, 1, 'Knight', P7);
    EUDTraceLog(22)
    f_placeBoard(2, 1, 'Knight', P7)
    # (Line 23) placeBoard(3, 1, 'Bishop', P7);
    EUDTraceLog(23)
    f_placeBoard(3, 1, 'Bishop', P7)
    # (Line 24) placeBoard(4, 1, 'King', P7);
    EUDTraceLog(24)
    f_placeBoard(4, 1, 'King', P7)
    # (Line 25) placeBoard(5, 1, 'Queen', P7);
    EUDTraceLog(25)
    f_placeBoard(5, 1, 'Queen', P7)
    # (Line 26) placeBoard(6, 1, 'Bishop', P7);
    EUDTraceLog(26)
    f_placeBoard(6, 1, 'Bishop', P7)
    # (Line 27) placeBoard(7, 1, 'Knight', P7);
    EUDTraceLog(27)
    f_placeBoard(7, 1, 'Knight', P7)
    # (Line 28) placeBoard(8, 1, 'Rook', P7);
    EUDTraceLog(28)
    f_placeBoard(8, 1, 'Rook', P7)
    # (Line 30) placeBoard(1, 7, 'Pawn', P8);
    EUDTraceLog(30)
    f_placeBoard(1, 7, 'Pawn', P8)
    # (Line 31) placeBoard(2, 7, 'Pawn', P8);
    EUDTraceLog(31)
    f_placeBoard(2, 7, 'Pawn', P8)
    # (Line 32) placeBoard(3, 7, 'Pawn', P8);
    EUDTraceLog(32)
    f_placeBoard(3, 7, 'Pawn', P8)
    # (Line 33) placeBoard(4, 7, 'Pawn', P8);
    EUDTraceLog(33)
    f_placeBoard(4, 7, 'Pawn', P8)
    # (Line 34) placeBoard(5, 7, 'Pawn', P8);
    EUDTraceLog(34)
    f_placeBoard(5, 7, 'Pawn', P8)
    # (Line 35) placeBoard(6, 7, 'Pawn', P8);
    EUDTraceLog(35)
    f_placeBoard(6, 7, 'Pawn', P8)
    # (Line 36) placeBoard(7, 7, 'Pawn', P8);
    EUDTraceLog(36)
    f_placeBoard(7, 7, 'Pawn', P8)
    # (Line 37) placeBoard(8, 7, 'Pawn', P8);
    EUDTraceLog(37)
    f_placeBoard(8, 7, 'Pawn', P8)
    # (Line 39) placeBoard(1, 8, 'Rook', P8);
    EUDTraceLog(39)
    f_placeBoard(1, 8, 'Rook', P8)
    # (Line 40) placeBoard(2, 8, 'Knight', P8);
    EUDTraceLog(40)
    f_placeBoard(2, 8, 'Knight', P8)
    # (Line 41) placeBoard(3, 8, 'Bishop', P8);
    EUDTraceLog(41)
    f_placeBoard(3, 8, 'Bishop', P8)
    # (Line 42) placeBoard(4, 8, 'King', P8);
    EUDTraceLog(42)
    f_placeBoard(4, 8, 'King', P8)
    # (Line 43) placeBoard(5, 8, 'Queen', P8);
    EUDTraceLog(43)
    f_placeBoard(5, 8, 'Queen', P8)
    # (Line 44) placeBoard(6, 8, 'Bishop', P8);
    EUDTraceLog(44)
    f_placeBoard(6, 8, 'Bishop', P8)
    # (Line 45) placeBoard(7, 8, 'Knight', P8);
    EUDTraceLog(45)
    f_placeBoard(7, 8, 'Knight', P8)
    # (Line 46) placeBoard(8, 8, 'Rook', P8);
    EUDTraceLog(46)
    f_placeBoard(8, 8, 'Rook', P8)
    # (Line 47) }
    # (Line 49) function onPluginStart() {

@EUDTracedFunc
def onPluginStart():
    # (Line 50) initBoard();
    EUDTraceLog(50)
    f_initBoard()
    # (Line 51) }
    # (Line 56) function afterTriggerExec () {

@EUDTracedFunc
def afterTriggerExec():
    # (Line 57) SetInvincibility(Enable, '(any unit)', AllPlayers, 'Anywhere');
    # (Line 58) const clickedUnitPtr = dwread_epd(EPD(0x6284E8));
    EUDTraceLog(57)
    DoActions(SetInvincibility(Enable, '(any unit)', AllPlayers, 'Anywhere'))
    EUDTraceLog(58)
    clickedUnitPtr = f_dwread_epd(EPD(0x6284E8))
    # (Line 60) if (clickedUnitPtr != 0) {
    _t1 = EUDIf()
    EUDTraceLog(60)
    if _t1(clickedUnitPtr == 0, neg=True):
        # (Line 61) const unitEPD = EPD(clickedUnitPtr);
        EUDTraceLog(61)
        unitEPD = EPD(clickedUnitPtr)
        # (Line 62) const unitX, unitY = dwbreak(dwread_epd(unitEPD + 0x28 / 4))[[0, 1]];
        EUDTraceLog(62)
        unitX, unitY = List2Assignable([_SRET(f_dwbreak(f_dwread_epd(unitEPD + 0x28 // 4)), [0, 1])])
        # (Line 63) const unitCellX = (unitX - loc.c11x) / 64 + 1;
        EUDTraceLog(63)
        unitCellX = (unitX - loc.c11x) // 64 + 1
        # (Line 64) const unitCellY = (unitY - loc.c11y) / 64 + 1;
        EUDTraceLog(64)
        unitCellY = (unitY - loc.c11y) // 64 + 1
        # (Line 65) const unitType = wread_epd(unitEPD + (0x64 / 4), 0);
        EUDTraceLog(65)
        unitType = f_wread_epd(unitEPD + (0x64 // 4), 0)
        # (Line 66) simpleprint(unitType, unitX, unitY);
        EUDTraceLog(66)
        f_simpleprint(unitType, unitX, unitY)
        # (Line 72) }
        # (Line 73) }
    EUDEndIf()
