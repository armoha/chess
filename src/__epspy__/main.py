## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *

def _RELIMP(path, mod_name):
    import inspect, pathlib, importlib.util
    p = pathlib.Path(inspect.getabsfile(inspect.currentframe())).parent
    for s in path.split("."):
        if s == "":  p = p.parent
        else:  p = p / s
    try:
        spec = importlib.util.spec_from_file_location(mod_name, p / (mod_name + ".py"))
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
    except FileNotFoundError:
        loader = EPSLoader(mod_name, str(p / (mod_name + ".eps")))
        spec = importlib.util.spec_from_loader(mod_name, loader)
        module = loader.create_module(spec)
        loader.exec_module(module)
    return module

def _IGVA(vList, exprListGen):
    def _():
        exprList = exprListGen()
        SetVariables(vList, exprList)
    EUDOnStart(_)

def _CGFW(exprf, retn):
    rets = [ExprProxy(None) for _ in range(retn)]
    def _():
        vals = exprf()
        for ret, val in zip(rets, vals):
            ret._value = val
    EUDOnStart(_)
    return rets

def _ARR(items):
    k = EUDArray(len(items))
    for i, item in enumerate(items):
        k[i] = item
    return k

def _VARR(items):
    k = EUDVArray(len(items))()
    for i, item in enumerate(items):
        k[i] = item
    return k

def _SRET(v, klist):
    return List2Assignable([v[k] for k in klist])

def _SV(dL, sL):
    [d << s for d, s in zip(FlattenList(dL), FlattenList(sL))]

class _ATTW:
    def __init__(self, obj, attrName):
        self.obj = obj
        self.attrName = attrName

    def __lshift__(self, r):
        setattr(self.obj, self.attrName, r)

    def __iadd__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov + v)

    def __isub__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov - v)

    def __imul__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov * v)

    def __ifloordiv__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov // v)

    def __iand__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov & v)

    def __ior__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov | v)

    def __ixor__(self, v):
        ov = getattr(self.obj, self.attrName)
        setattr(self.obj, self.attrName, ov ^ v)

class _ARRW:
    def __init__(self, obj, index):
        self.obj = obj
        self.index = index

    def __lshift__(self, r):
        self.obj[self.index] = r

    def __iadd__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov + v

    def __isub__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov - v

    def __imul__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov * v

    def __ifloordiv__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov // v

    def __iand__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov & v

    def __ior__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov | v

    def __ixor__(self, v):
        ov = self.obj[self.index]
        self.obj[self.index] = ov ^ v

def _L2V(l):
    ret = EUDVariable()
    if EUDIf()(l):
        ret << 1
    if EUDElse()():
        ret << 0
    EUDEndIf()
    return ret

def _LVAR(vs):
    ret, ops = [], []
    for v in FlattenList(vs):
        if IsEUDVariable(v) and v.IsRValue():
            ret.append(v.makeL())
        else:
            nv = EUDVariable()
            ret.append(nv)
            ops.append((nv, SetTo, v))
    if ops:
        SeqCompute(ops)
    return List2Assignable(ret)

def _LSH(l, r):
    if IsEUDVariable(l):  return f_bitlshift(l, r)
    else: return l << r

## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY

# (Line 1) import loc;
import loc
# (Line 2) import moveRule.pawn;
from moveRule import pawn
# (Line 3) import moveRule.rook;
from moveRule import rook
# (Line 4) import board;
import board
# (Line 6) function onPluginStart() {
@EUDTracedFunc
def onPluginStart():
    # (Line 7) board.initBoard();
    EUDTraceLog(7)
    board.f_initBoard()
    # (Line 8) }
    # (Line 10) var lastClickedUnitPtr = 0;

lastClickedUnitPtr = EUDCreateVariables(1)
_IGVA([lastClickedUnitPtr], lambda: [0])
# (Line 12) function afterTriggerExec () {
@EUDTracedFunc
def afterTriggerExec():
    # (Line 13) SetInvincibility(Enable, '(any unit)', AllPlayers, 'Anywhere');
    # (Line 14) const clickedUnitPtr = dwread_epd(EPD(0x6284E8));
    EUDTraceLog(13)
    DoActions(SetInvincibility(Enable, '(any unit)', AllPlayers, 'Anywhere'))
    EUDTraceLog(14)
    clickedUnitPtr = f_dwread_epd(EPD(0x6284E8))
    # (Line 17) if (lastClickedUnitPtr != clickedUnitPtr) {
    _t1 = EUDIf()
    EUDTraceLog(17)
    if _t1(lastClickedUnitPtr == clickedUnitPtr, neg=True):
        # (Line 18) if (clickedUnitPtr != 0) {
        _t2 = EUDIf()
        EUDTraceLog(18)
        if _t2(clickedUnitPtr == 0, neg=True):
            # (Line 19) const unitEPD = EPD(clickedUnitPtr);
            EUDTraceLog(19)
            unitEPD = EPD(clickedUnitPtr)
            # (Line 20) const unitX, unitY = dwbreak(dwread_epd(unitEPD + 0x28 / 4))[[0, 1]];
            EUDTraceLog(20)
            unitX, unitY = List2Assignable([_SRET(f_dwbreak(f_dwread_epd(unitEPD + 0x28 // 4)), [0, 1])])
            # (Line 21) const unitCellX = (unitX - loc.c11x) / 64 + 1;
            EUDTraceLog(21)
            unitCellX = (unitX - loc.c11x) // 64 + 1
            # (Line 22) const unitCellY = (unitY - loc.c11y) / 64 + 1;
            EUDTraceLog(22)
            unitCellY = (unitY - loc.c11y) // 64 + 1
            # (Line 23) const unitPlayer = bread_epd(unitEPD + 0x4C / 4, 0);
            EUDTraceLog(23)
            unitPlayer = f_bread_epd(unitEPD + 0x4C // 4, 0)
            # (Line 24) const unitType = wread_epd(unitEPD + (0x64 / 4), 0);
            EUDTraceLog(24)
            unitType = f_wread_epd(unitEPD + (0x64 // 4), 0)
            # (Line 25) simpleprint(unitType, unitX, unitY);
            EUDTraceLog(25)
            f_simpleprint(unitType, unitX, unitY)
            # (Line 28) if (unitType == $U('Pawn')) {
            _t3 = EUDIf()
            EUDTraceLog(28)
            if _t3(unitType == EncodeUnit('Pawn')):
                # (Line 29) RemoveUnit('Cursor', Force2);
                # (Line 30) pawn.movePawn(unitPlayer, unitCellX, unitCellY);
                EUDTraceLog(29)
                DoActions(RemoveUnit('Cursor', Force2))
                EUDTraceLog(30)
                pawn.f_movePawn(unitPlayer, unitCellX, unitCellY)
                # (Line 31) }
                # (Line 33) if (unitType == $U('Rook')) {
            EUDEndIf()
            _t4 = EUDIf()
            EUDTraceLog(33)
            if _t4(unitType == EncodeUnit('Rook')):
                # (Line 34) RemoveUnit('Cursor', Force2);
                # (Line 35) rook.moveRook(unitPlayer, unitCellX, unitCellY);
                EUDTraceLog(34)
                DoActions(RemoveUnit('Cursor', Force2))
                EUDTraceLog(35)
                rook.f_moveRook(unitPlayer, unitCellX, unitCellY)
                # (Line 36) }
                # (Line 38) else if (unitType == $U('Cursor')) {
            _t5 = EUDElseIf()
            EUDTraceLog(38)
            if _t5(unitType == EncodeUnit('Cursor')):
                # (Line 40) const lastUnitEPD = EPD(lastClickedUnitPtr);
                EUDTraceLog(40)
                lastUnitEPD = EPD(lastClickedUnitPtr)
                # (Line 41) const lastUnitX, lastUnitY = dwbreak(dwread_epd(lastUnitEPD + 0x28 / 4))[[0, 1]];
                EUDTraceLog(41)
                lastUnitX, lastUnitY = List2Assignable([_SRET(f_dwbreak(f_dwread_epd(lastUnitEPD + 0x28 // 4)), [0, 1])])
                # (Line 42) const lastUnitCellX = (lastUnitX - loc.c11x) / 64 + 1;
                EUDTraceLog(42)
                lastUnitCellX = (lastUnitX - loc.c11x) // 64 + 1
                # (Line 43) const lastUnitCellY = (lastUnitY - loc.c11y) / 64 + 1;
                EUDTraceLog(43)
                lastUnitCellY = (lastUnitY - loc.c11y) // 64 + 1
                # (Line 44) const lastUnitType = wread_epd(lastUnitEPD + (0x64 / 4), 0);
                EUDTraceLog(44)
                lastUnitType = f_wread_epd(lastUnitEPD + (0x64 // 4), 0)
                # (Line 46) board.removeBoard(unitCellX, unitCellY);
                EUDTraceLog(46)
                board.f_removeBoard(unitCellX, unitCellY)
                # (Line 47) board.placeBoard(unitCellX, unitCellY, lastUnitType, unitPlayer);
                EUDTraceLog(47)
                board.f_placeBoard(unitCellX, unitCellY, lastUnitType, unitPlayer)
                # (Line 48) board.removeBoard(lastUnitCellX, lastUnitCellY);
                EUDTraceLog(48)
                board.f_removeBoard(lastUnitCellX, lastUnitCellY)
                # (Line 49) RemoveUnit('Cursor', Force2);
                # (Line 50) }
                EUDTraceLog(49)
                DoActions(RemoveUnit('Cursor', Force2))
                # (Line 55) }
            EUDEndIf()
            # (Line 56) lastClickedUnitPtr = clickedUnitPtr;
        EUDEndIf()
        EUDTraceLog(56)
        lastClickedUnitPtr << (clickedUnitPtr)
        # (Line 57) }
        # (Line 58) }
    EUDEndIf()
